openapi: 3.0.0
info:
  title: Tyk Dashboard API
  version: 3.2.0
  description: |-
    ## <a name="introduction"></a> Introduction

    The Tyk Dashboard API offers granular, programmatic access to a centralised database of resources that your Tyk nodes can pull from. This API has a dynamic user administrative structure which means the secret key that is used to communicate with your Tyk nodes can be kept secret and access to the wider management functions can be handled on a user-by-user and organisation-by-organisation basis.

    A common question around using a database-backed configuration is how to programatically add API definitions to your Tyk nodes, the Dashboard API allows much more fine-grained, secure and multi-user access to your Tyk cluster, and should be used to manage a database-backed Tyk node.

    The Tyk Dashboard API works seamlessly with the Tyk Dashboard (and the two come bundled together).

    ## <a name="security-hierarchy"></a> Security Hierarchy

    The Dashboard API provides a more structured security layer to managing Tyk nodes.

    ### Organisations, APIs and Users

    With the Dashboard API and a database-backed Tyk setup, (and to an extent with file-based API setups - if diligence is used in naming an creating definitions), the following security model is applied to the management of Upstream APIs:

    * **Organisations**: All APIs are *owned* by an organisation, this is designated by the `OrgID` parameter in the API Definition.
    * **Users**: All users created in the Dashboard belong to an organisation (unless an exception is made for super-administrative access).
    * **APIs**: All APIs belong to an Organisation and only Users that belong to that organisation can see the analytics for those APIs and manage their configurations.
    * **API Keys**: API Keys are designated by organisation, this means an API key that has full access rights will not be allowed to access the APIs of another organisation on the same system, but can have full access to all APIs within the organisation.
    * **Access Rights**: Access rights are stored with the key, this enables a key to give access to multiple APIs, this is defined by the session object in the core Tyk API.

    In order to use the Dashboard API, you'll need to get the `Tyk Dashboard API Access Credentials` secret from your user profile on the Dashboard UI.

    The secret you set should then be sent along as a header with each Dashboard API Request in order for it to be successful:

    ```
    authorization: <your-secret>
    ```
servers:
  - url: 'http://localhost/'
  - url: 'https://localhost/'
tags:
  - name: Keys
    description: API Key Management
paths:
  /api/apis/{apiID}/keys:
    get:
      summary: List keys
      description: Lists keys that grant access to the API with the ID {apiID}.
      operationId: listKeys
      tags:
        - Keys
      parameters:
        - name: apiID
          in: path
          description: ID of API the keys grant access to. Can either be the internal or external API ID.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Keys retrieved successfully.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/apiAllKeys"
              example:
                data: 
                  keys:
                    - 54b53d3aeba6db5c3500000289a8fbc2bbba4ebc4934bb113588c792
                    - 54b53d3aeba6db5c3500000230459d8568ec4bbf675bda2ff05e9293
                    - 54b53d3aeba6db5c35000002ec9a2b1aca7b495771273a0895cb3627
                    - 54b53d3aeba6db5c3500000272d97a10538248e9523ca09e425090b8
                    - 54b53d3aeba6db5c3500000252b5c56c61ad42fe765101f6d70cf9c6

  /api/apis/{apiID}/keys/{keyID}:
    parameters:
      - name: apiID
        in: path
        description: ID of API the keys grant access to. Can either be the internal or external API ID.
        required: true
        schema:
          type: string
      - name: keyID
        in: path
        description: The Key ID.
        required: true
        schema:
          type: string
    get:
      summary: Get key
      description: Fetches the key that grant access to the API with the ID {apiID} and key ID {keyID}.
      operationId: getKey
      tags:
        - Keys
      responses:
        '200':
          description: Key retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionState'
              example:
                api_model: {}
                key_id: eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0
                data:
                  last_check: 1421674410
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 1423684135
                  quota_max: -1
                  quota_renews: 1421164189
                  quota_remaining: -1
                  quota_renewal_rate: 60
                  access_rights:
                    39d2c98be05c424371c600bd8b3e2242:
                      api_name: Nitrous Test
                      api_id: 39d2c98be05c424371c600bd8b3e2242
                      versions: 
                        - Default
                org_id: 54b53d3aeba6db5c35000002
                oauth_client_id: ""
                basic_auth_data: 
                  password: ""
                hmac_enabled: true
                hmac_string: ""

    put:
      summary: Update Key
      description: |-
        You can also manually add keys to Tyk using your own key-generation algorithm. It is recommended if using this approach to ensure that the OrgID being used in the API Definition and the key data is blank so that Tyk does not try to prepend or manage the key in any way.
      tags:
        - Keys
      operationId: updateKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionState"
            example:
                last_check: 1421674410
                allowance: 1000
                rate: 1000
                per: 60
                expires: 1423684135
                quota_max: -1
                quota_renews: 1421164189
                quota_remaining: -1
                quota_renewal_rate: 60
                access_rights:
                  39d2c98be05c424371c600bd8b3e2242:
                    api_name: Nitrous Test
                    api_id: 39d2c98be05c424371c600bd8b3e2242
                    versions: 
                      - Default
                org_id: 54b53d3aeba6db5c35000002
                oauth_client_id: ""
                basic_auth_data: 
                  password: ""
                hmac_enabled: true
                hmac_string: ""
      responses:
        '200':
          description: Key updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiModifyKeySuccess'
              example:
                action: updated
                status: ok
        '400':
          description: No or incorrect Key ID specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Key ID not specified
                status: error         
    delete:
      summary: Delete Key
      description: Deleting a key will remove it permanently from the system, however analytics relating to that key will still be available.
      tags:
        - Keys
      operationId: deleteKey
      responses:
        '200':
          description: Key deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                action: Key deleted
                status: ok
  /api/keys:
    post:
      summary: Create a key
      description: |-
        Tyk will generate the access token based on the OrgID specified in the API Definition and a random UUID. This ensures that keys can be "owned" by different API Owners should segmentation be needed at an organisational level.
        <br/><br/>
        API keys without access_rights data will be written to all APIs on the system (this also means that they will be created across all SessionHandlers and StorageHandlers, it is recommended to always embed access_rights data in a key to ensure that only targeted APIs and their back-ends are written to.
      tags:
        - Keys
      operationId: addKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionState"
            example:
              last_check: 0
              allowance: 1000
              rate: 1000
              per: 60
              expires: 0
              quota_max: 10000
              quota_renews: 1424543479
              quota_remaining: 10000
              quota_renewal_rate: 2520000
              access_rights:
                bc2f8cfb7ab241504d9f3574fe407499:
                  api_id: bc2f8cfb7ab241504d9f3574fe407499
                  api_name: Test
                  versions:
                    - Default
      responses:
        '200':
          description: New Key added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionState'
              example:
                api_model: {}
                key_id: eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0
                data:
                  last_check: 1421674410
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 1423684135
                  quota_max: -1
                  quota_renews: 1421164189
                  quota_remaining: -1
                  quota_renewal_rate: 60
                  access_rights:
                    39d2c98be05c424371c600bd8b3e2242:
                      api_name: Nitrous Test
                      api_id: 39d2c98be05c424371c600bd8b3e2242
                      versions: 
                        - Default
                org_id: 54b53d3aeba6db5c35000002
                oauth_client_id: ""
                basic_auth_data: 
                  password: ""
                hmac_enabled: true
                hmac_string: ""
        '400':
          description: Malformed data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/apiStatusMessage'
              example:
                message: Malformed Key data
                status: error

  /api/keys/{keyID}:
    parameters:
      - name: keyID
        in: path
        description: The Key ID.
        required: true
        schema:
          type: string
    post:
      summary: Create custom key
      description: Creates a key with a custom key ID.
      operationId: createCustomKey
      tags:
        - Keys
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SessionState"
            example:
              apply_policies:
                - 5ecc0b91081ac40001ed261c
              org_id: 5eb06f441fe4c4000147476e
              expires: 0
              allowance: 0
              per: 0
              quota_max: 0
              rate: 0
              access_rights:
                - name: b742100081764ff06b00f75733145614
                  api_name: ""
                  api_id: b742100081764ff06b00f75733145614
                  versions:
                    - Default
      responses:
        '200':
          description: Custom key created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionState'
              example:
                api_model: {}
                key_id: eyJvcmciOiI1ZTlkOTU0NGExZGNkNjAwMDFkMGVkMjAiLCJpZCI6ImhlbGxvLXdvcmxkIiwiaCI6Im11cm11cjY0In0
                data:
                  last_check: 1421674410
                  allowance: 1000
                  rate: 1000
                  per: 60
                  expires: 1423684135
                  quota_max: -1
                  quota_renews: 1421164189
                  quota_remaining: -1
                  quota_renewal_rate: 60
                  access_rights:
                    39d2c98be05c424371c600bd8b3e2242:
                      api_name: Nitrous Test
                      api_id: 39d2c98be05c424371c600bd8b3e2242
                      versions: 
                        - Default
                key_hash: 567b9a5419c3a9ef

components:
  schemas:
    SessionState:
      description: >-
        There's a data structure that's based on this and it's used for Protocol
        Buffer support, make sure to update
        "coprocess/proto/coprocess_session_state.proto" and generate the
        bindings using: cd coprocess/proto && ./update_bindings.sh
      properties:
        tags:
          items:
            type: string
          type: array
          x-go-name: Tags
        access_rights:
          additionalProperties:
            $ref: '#/components/schemas/AccessDefinition'
          type: object
          x-go-name: AccessRights
        alias:
          type: string
          x-go-name: Alias
        allowance:
          format: double
          type: number
          x-go-name: Allowance
        apply_policies:
          items:
            type: string
          type: array
          x-go-name: ApplyPolicies
        apply_policy_id:
          type: string
          x-go-name: ApplyPolicyID
        basic_auth_data:
          properties:
            hash_type:
              $ref: '#/components/schemas/HashType'
            password:
              type: string
              x-go-name: Password
          type: object
          x-go-name: BasicAuthData
        certificate:
          type: string
          x-go-name: Certificate
        data_expires:
          format: int64
          type: integer
          x-go-name: DataExpires
        enable_detail_recording:
          type: boolean
          x-go-name: EnableDetailedRecording
        expires:
          format: int64
          type: integer
          x-go-name: Expires
        hmac_enabled:
          type: boolean
          x-go-name: HMACEnabled
        hmac_string:
          type: string
          x-go-name: HmacSecret
        id_extractor_deadline:
          format: int64
          type: integer
          x-go-name: IdExtractorDeadline
        is_inactive:
          type: boolean
          x-go-name: IsInactive
        jwt_data:
          properties:
            secret:
              type: string
              x-go-name: Secret
          type: object
          x-go-name: JWTData
        last_check:
          format: int64
          type: integer
          x-go-name: LastCheck
        last_updated:
          type: string
          x-go-name: LastUpdated
        meta_data:
          additionalProperties:
            type: object
          type: object
          x-go-name: MetaData
        monitor:
          properties:
            trigger_limits:
              items:
                format: double
                type: number
              type: array
              x-go-name: TriggerLimits
          type: object
          x-go-name: Monitor
        oauth_client_id:
          type: string
          x-go-name: OauthClientID
        oauth_keys:
          additionalProperties:
            type: string
          type: object
          x-go-name: OauthKeys
        org_id:
          type: string
          x-go-name: OrgID
        per:
          format: double
          type: number
          x-go-name: Per
        quota_max:
          format: int64
          type: integer
          x-go-name: QuotaMax
        quota_remaining:
          format: int64
          type: integer
          x-go-name: QuotaRemaining
        quota_renewal_rate:
          format: int64
          type: integer
          x-go-name: QuotaRenewalRate
        quota_renews:
          format: int64
          type: integer
          x-go-name: QuotaRenews
        rate:
          format: double
          type: number
          x-go-name: Rate
        session_lifetime:
          format: int64
          type: integer
          x-go-name: SessionLifetime
        throttle_interval:
          format: double
          type: number
          x-go-name: ThrottleInterval
        throttle_retry_limit:
          format: int64
          type: integer
          x-go-name: ThrottleRetryLimit
      title: >-
        SessionState objects represent a current API session, mainly used for
        rate limiting.
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    AccessDefinition:
      description: AccessDefinition defines which versions of an API a key has access to
      properties:
        allowed_urls:
          items:
            $ref: '#/components/schemas/AccessSpec'
          type: array
          x-go-name: AllowedURLs
        api_id:
          type: string
          x-go-name: APIID
        api_name:
          type: string
          x-go-name: APIName
        limit:
          $ref: '#/components/schemas/APILimit'
        versions:
          items:
            type: string
          type: array
          x-go-name: Versions
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    HashType:
      type: string
      x-go-package: github.com/TykTechnologies/tyk/user
    AccessSpec:
      description: >-
        AccessSpecs define what URLS a user has access to an what methods are
        enabled
      properties:
        methods:
          items:
            type: string
          type: array
          x-go-name: Methods
        url:
          type: string
          x-go-name: URL
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    APILimit:
      description: APILimit stores quota and rate limit on ACL level (per API)
      properties:
        per:
          format: double
          type: number
          x-go-name: Per
        quota_max:
          format: int64
          type: integer
          x-go-name: QuotaMax
        quota_remaining:
          format: int64
          type: integer
          x-go-name: QuotaRemaining
        quota_renewal_rate:
          format: int64
          type: integer
          x-go-name: QuotaRenewalRate
        quota_renews:
          format: int64
          type: integer
          x-go-name: QuotaRenews
        rate:
          format: double
          type: number
          x-go-name: Rate
        set_by_policy:
          type: boolean
          x-go-name: SetByPolicy
        throttle_interval:
          format: double
          type: number
          x-go-name: ThrottleInterval
        throttle_retry_limit:
          format: int64
          type: integer
          x-go-name: ThrottleRetryLimit
      type: object
      x-go-package: github.com/TykTechnologies/tyk/user
    apiAllKeys:
      description: apiAllKeys represents a list of keys in the memory store
      properties:
        keys:
          items:
            type: string
          type: array
          x-go-name: APIKeys
      type: object
      x-go-package: github.com/TykTechnologies/
    apiModifyKeySuccess:
      description: apiModifyKeySuccess represents when a Key modification was successful
      properties:
        action:
          type: string
          x-go-name: Action
        key:
          description: 'in:body'
          type: string
          x-go-name: Key
        key_hash:
          type: string
          x-go-name: KeyHash
        status:
          type: string
          x-go-name: Status
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    apiStatusMessage:
      description: apiStatusMessage represents an API status message
      properties:
        message:
          description: Response details
          type: string
          x-go-name: Message
        status:
          type: string
          x-go-name: Status
      type: object
      x-go-package: github.com/TykTechnologies/tyk
    