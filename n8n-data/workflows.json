[
        {
        "createdAt": "2025-07-17T13:55:50.287Z",
        "updatedAt": "2025-10-26T07:19:44.000Z",
        "id": "4mng9TxZXz8NIJvK",
        "name": "Prod - Release Notes",
        "active": false,
        "isArchived": false,
        "nodes": [
            {
                "parameters": {
                    "operation": "get",
                    "issueKey": "={{ $json.key }}",
                    "additionalFields": {}
                },
                "type": "n8n-nodes-base.jira",
                "typeVersion": 1,
                "position": [
                    416,
                    0
                ],
                "id": "29b5089a-6064-4820-a34b-2d78f547b543",
                "name": "Get an issue",
                "credentials": {
                    "jiraSoftwareCloudApi": {
                        "id": "Q6ORmeXN0w4qtf2u",
                        "name": "Jira SW Cloud account"
                    }
                }
            },
            {
                "parameters": {
                    "promptType": "define",
                    "text": "=Given the following Jira issue information:  \nTitle: {{ $json.jiraTitle }}  \nDescription: {{ $json.jiraDescription }}\nComponents: {{ $json.jiraComponents }}\nVersions: {{ $json.jiraVersions }}\n\nGenerate a release note with five fields:  \n- \"title\": a concise release note title  \n- \"summary\": a short summary of the change  \n- \"components\": a list of components affected by the change \n- \"versions\": a list of versions affected by the change \n- \"type\": one of the following values based on the description content:  \n  - \"Added\" (for new features or additions)  \n  - \"Changed\" (for modifications or improvements)  \n  - \"Fixed\" (for bug fixes)  \n  - \"Security Fixes\" (if the ticket is about security issues or CVE fixes)  \n\nOutput only valid JSON in this format:  \n{\n  \"title\": \"...\",\n  \"summary\": \"...\",\n  \"components\": [\"...\"],\n  \"versions\": [\"...\"],\n  \"type\": \"...\" // one of \"Added\", \"Changed\", \"Fixed\", \"Security Fixes\"\n}\n\nDo not include any code blocks, markdown, or any other text. Output ONLY the JSON object, not wrapped in triple backticks, not labeled as json, and not inside an array. If you are processing multiple issues, output a JSON array with each object in the format above, and nothing else.",
                    "batching": {}
                },
                "type": "@n8n/n8n-nodes-langchain.chainLlm",
                "typeVersion": 1.7,
                "position": [
                    1088,
                    0
                ],
                "id": "cb3ee7e5-5434-4ce3-b084-72198ea8334c",
                "name": "Basic LLM Chain"
            },
            {
                "parameters": {
                    "url": "https://tyktech.atlassian.net/rest/api/2/search/jql",
                    "authentication": "predefinedCredentialType",
                    "nodeCredentialType": "jiraSoftwareCloudApi",
                    "sendQuery": true,
                    "queryParameters": {
                        "parameters": [
                            {
                                "name": "jql",
                                "value": "=fixVersion = \"{{ $json.name }}\""
                            },
                            {
                                "name": "maxResults",
                                "value": "500"
                            },
                            {
                                "name": "fields",
                                "value": "key"
                            }
                        ]
                    },
                    "options": {
                        "redirect": {
                            "redirect": {}
                        }
                    }
                },
                "type": "n8n-nodes-base.httpRequest",
                "typeVersion": 4.2,
                "position": [
                    -32,
                    0
                ],
                "id": "3b6b5bfb-fbe5-4e3a-a094-05fc1623ff99",
                "name": "Get Jira Issues of a Version",
                "credentials": {
                    "jiraSoftwareCloudApi": {
                        "id": "Q6ORmeXN0w4qtf2u",
                        "name": "Jira SW Cloud account"
                    }
                }
            },
            {
                "parameters": {
                    "url": "=https://tyktech.atlassian.net/rest/api/2/version/{{ $json.version }}",
                    "authentication": "predefinedCredentialType",
                    "nodeCredentialType": "jiraSoftwareCloudApi",
                    "options": {}
                },
                "type": "n8n-nodes-base.httpRequest",
                "typeVersion": 4.2,
                "position": [
                    -256,
                    0
                ],
                "id": "dd666d04-5e86-4139-8f14-b9748c6c7759",
                "name": "Check Version",
                "credentials": {
                    "jiraSoftwareCloudApi": {
                        "id": "Q6ORmeXN0w4qtf2u",
                        "name": "Jira SW Cloud account"
                    }
                }
            },
            {
                "parameters": {
                    "operation": "write",
                    "fileName": "/data/changelog.md",
                    "options": {}
                },
                "type": "n8n-nodes-base.readWriteFile",
                "typeVersion": 1,
                "position": [
                    2160,
                    0
                ],
                "id": "d5cd00f8-b6c0-43a0-b7e9-b36c70075bab",
                "name": "Read/Write Files from Disk"
            },
            {
                "parameters": {
                    "fileSelector": "/data/input.json",
                    "options": {}
                },
                "type": "n8n-nodes-base.readWriteFile",
                "typeVersion": 1,
                "position": [
                    -1072,
                    0
                ],
                "id": "363a6839-4668-46c7-9bdc-7ff7b8aa6f7f",
                "name": "Read/Write Files from Disk1"
            },
            {
                "parameters": {
                    "operation": "fromJson",
                    "options": {}
                },
                "type": "n8n-nodes-base.extractFromFile",
                "typeVersion": 1,
                "position": [
                    -848,
                    0
                ],
                "id": "e496beab-72a4-4874-8cb8-a3b15e576267",
                "name": "Extract from File"
            },
            {
                "parameters": {},
                "type": "n8n-nodes-base.manualTrigger",
                "typeVersion": 1,
                "position": [
                    -1296,
                    0
                ],
                "id": "77153f80-ea18-47b9-8f07-4a90e829e2d9",
                "name": "When clicking ‘Execute workflow’"
            },
            {
                "parameters": {
                    "operation": "toText",
                    "sourceProperty": "changelog",
                    "options": {}
                },
                "type": "n8n-nodes-base.convertToFile",
                "typeVersion": 1.1,
                "position": [
                    1936,
                    0
                ],
                "id": "3a841601-1e04-49d6-a701-ccfe9b5beb88",
                "name": "Convert to File"
            },
            {
                "parameters": {
                    "assignments": {
                        "assignments": [
                            {
                                "id": "55afedd3-15b1-4bc6-b7c9-fa55c9936a5b",
                                "name": "jiraID",
                                "value": "={{ $json.key }}",
                                "type": "string"
                            },
                            {
                                "id": "71c25d0d-9af4-4807-9a35-81aa09543cfb",
                                "name": "jiraTitle",
                                "value": "={{ $json.fields.summary }}",
                                "type": "string"
                            },
                            {
                                "id": "e130e76a-42c4-4a5e-92dd-19a41c3a466c",
                                "name": "jiraDescription",
                                "value": "={{ $json.fields.description }}",
                                "type": "string"
                            },
                            {
                                "id": "19c1a5c1-9a5a-4ac2-8616-1fcb7c623ff9",
                                "name": "jiraComponents",
                                "value": "={{ $json.fields.components.map(c => c.name) }}",
                                "type": "array"
                            },
                            {
                                "id": "2d9bd0ab-1154-414c-890c-81c3dbade44a",
                                "name": "jiraVersions",
                                "value": "={{ $json.fields.versions.map(c => c.name) }}",
                                "type": "array"
                            },
                            {
                                "id": "0a6e257c-e8cf-4048-bdab-3c13a33cfdfd",
                                "name": "includeInChangeLog",
                                "value": "={{ $json.fields.customfield_10335?.value || \"No\" }}",
                                "type": "string"
                            }
                        ]
                    },
                    "options": {}
                },
                "type": "n8n-nodes-base.set",
                "typeVersion": 3.4,
                "position": [
                    640,
                    0
                ],
                "id": "90115cac-b6c3-4888-9f03-349ad581b62d",
                "name": "Extract Specific Fields"
            },
            {
                "parameters": {
                    "conditions": {
                        "options": {
                            "caseSensitive": true,
                            "leftValue": "",
                            "typeValidation": "strict",
                            "version": 2
                        },
                        "conditions": [
                            {
                                "id": "036a7b93-1ecb-4962-a8f2-b5ff40fe82fb",
                                "leftValue": "={{ $json.includeInChangeLog }}",
                                "rightValue": "Yes",
                                "operator": {
                                    "type": "string",
                                    "operation": "equals",
                                    "name": "filter.operator.equals"
                                }
                            }
                        ],
                        "combinator": "and"
                    },
                    "options": {}
                },
                "type": "n8n-nodes-base.filter",
                "typeVersion": 2.2,
                "position": [
                    864,
                    0
                ],
                "id": "7b74138c-9a9e-45b5-963a-91bb845e42be",
                "name": "Select Included In ChangeLog"
            },
            {
                "parameters": {
                    "model": {
                        "__rl": true,
                        "mode": "list",
                        "value": "claude-sonnet-4-20250514",
                        "cachedResultName": "Claude 4 Sonnet"
                    },
                    "options": {}
                },
                "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
                "typeVersion": 1.3,
                "position": [
                    1088,
                    208
                ],
                "id": "2f2e06ce-35cf-4f02-a42f-d6e49301fea7",
                "name": "Anthropic Chat Model",
                "credentials": {
                    "anthropicApi": {
                        "id": "vfcTb4BuJhVZy0Pq",
                        "name": "Tyk - Anthropic AI Studio (AI Quickstart Access)"
                    }
                }
            },
            {
                "parameters": {
                    "assignments": {
                        "assignments": [
                            {
                                "id": "e3e60dcf-a64c-4046-ae3a-4d8de0a23f7a",
                                "name": "version",
                                "value": "={{$json.body ? $json.body.data[0].version : $json.data[0].version}}",
                                "type": "string"
                            }
                        ]
                    },
                    "options": {}
                },
                "type": "n8n-nodes-base.set",
                "typeVersion": 3.4,
                "position": [
                    -528,
                    0
                ],
                "id": "f781d825-5b0a-4943-83fc-ca3a52ba3258",
                "name": "Edit Fields"
            },
            {
                "parameters": {
                    "jsCode": "const output = [];\n\nfor (const item of $input.all()) {\n  if (Array.isArray(item.json.issues)) {\n    for (const issue of item.json.issues) {\n      output.push({ json: { key: issue.key } });\n    }\n  }\n}\n\nreturn output;\n"
                },
                "type": "n8n-nodes-base.code",
                "typeVersion": 2,
                "position": [
                    192,
                    0
                ],
                "id": "fcebaa40-c20e-496d-90c6-21acfb15d7e6",
                "name": "Get All Tickets for a Given Version"
            },
            {
                "parameters": {
                    "jsCode": "function extractJson(text) {\n  // Remove code block formatting if present\n  let cleaned = text.trim();\n  if (cleaned.startsWith(\"```json\")) {\n    cleaned = cleaned.replace(/^```json/, '').replace(/```$/, '').trim();\n  } else if (cleaned.startsWith(\"```\")) {\n    cleaned = cleaned.replace(/^```/, '').replace(/```$/, '').trim();\n  }\n  return JSON.parse(cleaned);\n}\n\nconst results = [];\n\nfor (const item of $input.all()) {\n  const parsed = extractJson(item.json.text);\n  results.push({ json: parsed });\n}\n\nreturn results;"
                },
                "type": "n8n-nodes-base.code",
                "typeVersion": 2,
                "position": [
                    1456,
                    0
                ],
                "id": "d6a1ba59-3db0-41c5-b6b9-debd744e2ecf",
                "name": "Parse JSON"
            },
            {
                "parameters": {
                    "jsCode": "\/\/ --- Configure groups here --- const selectedComponents = [ { groupName: \"Dashboard\", \/\/ name to be used in changelog components: [\"Tyk Dashboard\", \"Activity Page\", \"Tyk Analytics\"] }, { groupName: \"Gateway\", components: [\"Tyk Gateway\", \"API Gateway\"] } ]; \/\/ Types and order for each changelog const TYPES = [\"Added\", \"Changed\", \"Fixed\", \"Security Fixes\"]; \/\/ Helper to generate HTML list for each type function buildList(items) { if (!items.length) return \"\"; return `<ul>\\n${items.map(item => `<li>\\n<details>\\n<summary>${item.title}<\/summary>\\n\\n${item.summary}\\n<\/details>\\n<\/li>` ).join('\\n')}\\n<\/ul>\\n\\n`; } \/\/ Normalize incoming items const allItems = items.map(i => i.json || i); \/\/ Helper: returns true if ticketComponents contains any of targetComponents function matchesAny(ticketComponents, targetComponents) { if (!Array.isArray(ticketComponents) || !Array.isArray(targetComponents)) return false; return ticketComponents.some(tc => targetComponents.includes(tc)); } \/\/ Items for a given group (based on group's components) function itemsForGroup(group) { return allItems.filter(it => { const comps = Array.isArray(it.components) ? it.components : []; return matchesAny(comps, group.components); }); } \/\/ Items that do NOT belong to any group function itemsForOther() { return allItems.filter(it => { const comps = Array.isArray(it.components) ? it.components : []; \/\/ if none of this item's components matches any group's components, include it return !selectedComponents.some(group => matchesAny(comps, group.components)); }); } \/\/ Build changelog block for a group if it has any items for the configured TYPES function buildChangelogForGroup(groupName, itemsForThisGroup) { const items = itemsForThisGroup || []; \/\/ check whether any of the configured TYPES has items for this group const hasAnyTypeItems = TYPES.some(t => items.some(it => it.type === t)); if (!hasAnyTypeItems) return \"\"; \/\/ don't output the main header if no child sections have content let out = `### ${groupName}\\n\\n`; out += `#### Changelog\\n\\n`; \/\/ only include child headers that have items for (const t of TYPES) { const groupItems = items.filter(it => it.type === t); if (groupItems.length > 0) { out += `##### ${t}\\n\\n`; out += buildList(groupItems); } } return out; } \/\/ Build full output: each selected group, then Other Component let output = \"\"; for (const group of selectedComponents) { const groupItems = itemsForGroup(group); output += buildChangelogForGroup(group.groupName, groupItems); } \/\/ Other Component section const otherItems = itemsForOther(); output += buildChangelogForGroup(\"Other Component (Tickets that do not belong selectedComponents will come here)\", otherItems); \/\/ Return as markdown return [{ json: { changelog: output } }];"
                },
                "type": "n8n-nodes-base.code",
                "typeVersion": 2,
                "position": [
                    1696,
                    0
                ],
                "id": "1a4207a5-b730-441c-80f7-707e4cf8b808",
                "name": "Convert JSON to Markdown (Changelog Format)"
            }
        ],
        "connections": {
            "Get an issue": {
                "main": [
                    [
                        {
                            "node": "Extract Specific Fields",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Basic LLM Chain": {
                "main": [
                    [
                        {
                            "node": "Parse JSON",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Get Jira Issues of a Version": {
                "main": [
                    [
                        {
                            "node": "Get All Tickets for a Given Version",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Check Version": {
                "main": [
                    [
                        {
                            "node": "Get Jira Issues of a Version",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Read/Write Files from Disk1": {
                "main": [
                    [
                        {
                            "node": "Extract from File",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Extract from File": {
                "main": [
                    [
                        {
                            "node": "Edit Fields",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "When clicking ‘Execute workflow’": {
                "main": [
                    [
                        {
                            "node": "Read/Write Files from Disk1",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Read/Write Files from Disk": {
                "main": [
                    []
                ]
            },
            "Convert to File": {
                "main": [
                    [
                        {
                            "node": "Read/Write Files from Disk",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Extract Specific Fields": {
                "main": [
                    [
                        {
                            "node": "Select Included In ChangeLog",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Select Included In ChangeLog": {
                "main": [
                    [
                        {
                            "node": "Basic LLM Chain",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Anthropic Chat Model": {
                "ai_languageModel": [
                    [
                        {
                            "node": "Basic LLM Chain",
                            "type": "ai_languageModel",
                            "index": 0
                        }
                    ]
                ]
            },
            "Edit Fields": {
                "main": [
                    [
                        {
                            "node": "Check Version",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Get All Tickets for a Given Version": {
                "main": [
                    [
                        {
                            "node": "Get an issue",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Parse JSON": {
                "main": [
                    [
                        {
                            "node": "Convert JSON to Markdown (Changelog Format)",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            },
            "Convert JSON to Markdown (Changelog Format)": {
                "main": [
                    [
                        {
                            "node": "Convert to File",
                            "type": "main",
                            "index": 0
                        }
                    ]
                ]
            }
        },
        "settings": {
            "executionOrder": "v1"
        },
        "staticData": null,
        "meta": {
            "templateCredsSetupCompleted": true
        },
        "pinData": {
            "Extract from File": [
                {
                    "json": {
                        "data": [
                            {
                                "version": "11673"
                            }
                        ]
                    }
                }
            ]
        },
        "versionId": "00c79d65-6ae2-497a-ac65-d67ddc2188f9",
        "triggerCount": 0,
        "tags": [],
        "shared": [
            {
                "createdAt": "2025-10-25T17:01:31.508Z",
                "updatedAt": "2025-10-25T17:01:31.508Z",
                "role": "workflow:owner",
                "workflowId": "4mng9TxZXz8NIJvK",
                "projectId": "IlkLjH9ZSJhm1tjb",
                "project": {
                    "createdAt": "2025-10-25T16:56:46.353Z",
                    "updatedAt": "2025-10-25T16:57:34.706Z",
                    "id": "IlkLjH9ZSJhm1tjb",
                    "name": "Sharad Regoti <sharadregoti15@gmail.com>",
                    "type": "personal",
                    "icon": null,
                    "description": null
                }
            }
        ]
    }
]